// Generated by CoffeeScript 1.6.3
/*
    jQuery live validation 1.0
    
    Copyright (c) 2013 Helge Söderström
    http://github.com/dimhoLt
    
    Plugin website:
    http://github.com/dimhoLt/jquery_live_validation
    
    Dual licensed under the MIT and GPL licenses.
    http://en.wikipedia.org/wiki/MIT_License
    http://en.wikipedia.org/wiki/GNU_General_Public_License
    
    Compile through:
    $ coffee -bw -o js -c CoffeeScript/jquery.live_validation.coffee
    
    Minify compiled JS through:
    $ uglifyjs js/jquery.live_validation.js -p js/jquery.live_validation.min.js
*/

$.fn.extend({
  liveValidation: function(options) {
    var hideMessage, inputField, settings, validate, validationFailure, validationSuccess,
      _this = this;
    settings = {
      container: null,
      validationCondition: null,
      errorMessage: "Error here =(",
      successMessage: false,
      animationSpeed: 100
    };
    settings = jQuery.extend(settings, options);
    inputField = $(this);
    hideMessage = function(animate) {
      var statusContainer;
      if (animate == null) {
        animate = true;
      }
      if ((settings.container == null) || settings.container.length < 1) {
        return;
      }
      statusContainer = settings.container.find(".fieldStatus");
      if (statusContainer.length < 1) {
        return;
      }
      if (animate) {
        return statusContainer.animate({
          'margin-bottom': '0px'
        }, settings.animationSpeed);
      } else {
        return statusContainer.css({
          'margin-bottom': '0px'
        });
      }
    };
    validationSuccess = function(timeout) {
      var fieldset, slideDistance, statusContainer;
      if (timeout == null) {
        timeout = 500;
      }
      if ((settings.container == null) || settings.container.length < 1) {
        return;
      }
      fieldset = settings.container.find("fieldset");
      fieldset.removeClass("error").addClass("success");
      if (settings.successMessage === false) {
        hideMessage(false);
        return;
      }
      statusContainer = settings.container.find(".fieldStatus");
      if (statusContainer.length === 1) {
        statusContainer.text(settings.successMessage);
        slideDistance = statusContainer.outerHeight() - 2;
        return statusContainer.removeClass("error").addClass("success").promise().done(function() {
          return inputField.animate({
            'margin-bottom': '-' + slideDistance + 'px'
          }, settings.animationSpeed, function() {
            return inputField.delay(timeout).animate({
              'margin-bottom': '0px'
            });
          });
        });
      }
    };
    validationFailure = function() {
      var fieldset, slideDistance, statusContainer;
      if ((settings.container == null) || settings.container.length < 1) {
        return;
      }
      fieldset = settings.container.find("fieldset");
      fieldset.removeClass("success").addClass("error");
      statusContainer = settings.container.find(".fieldStatus");
      if (settings.errorMessage === false) {
        hideMessage(false);
        return;
      }
      if (statusContainer.length === 1) {
        statusContainer.text(settings.errorMessage);
        slideDistance = statusContainer.outerHeight() - 2;
        return statusContainer.removeClass("success").addClass("error").animate({
          'margin-bottom': '-' + slideDistance + 'px'
        }, settings.animationSpeed);
      }
    };
    validate = function() {
      var result;
      result = false;
      if (typeof settings.validationCondition === "object" && settings.validationCondition instanceof RegExp) {
        result = settings.validationCondition.test(inputField.val());
      } else {
        result = settings.validationCondition.val() === inputField.val();
      }
      if (result === true) {
        return validationSuccess();
      } else {
        return validationFailure();
      }
    };
    settings.container = inputField.closest(".inputContainer");
    if (!(settings.validationCondition instanceof RegExp)) {
      settings.validationCondition.on('keyup blur', function() {
        return validate();
      });
    }
    return settings.container.on('keyup blur', function() {
      return validate();
    });
  }
});
